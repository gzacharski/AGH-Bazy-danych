{
	"info": {
		"_postman_id": "f700e280-6963-4293-8c2b-b5d37e937315",
		"name": "Bazy danych Neo4j",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CRUD",
			"item": [
				{
					"name": "Employee",
					"item": [
						{
							"name": "Get all employees",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5bc38c03-1ed5-4870-9a67-ad35eb33d742",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f2b6dd4-8894-4abd-9bb7-1a33313630cc",
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body=pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Create employee');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should return all employees with theirs properties."
							},
							"response": []
						},
						{
							"name": "Create employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09e030d6-391b-4fbd-a24f-dc0219f17da4",
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"employee_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e9073040-35c9-4f15-8e84-48110f6e58e3",
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"employee_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"employee_id\", pm.response.json().id.low);\r",
											"postman.setNextRequest('Update employee by ID');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"Davolio\",\r\n    \"country\": \"United States\",\r\n    \"hireDate\": \"1992-05-01\",\r\n    \"extension\": 5467,\r\n    \"address\": \"507 - 20th Ave. E.\\\\r\\\\nApt. 2A\",\r\n    \"notes\": \"Education includes a BA in psychology from Colorado State University.  She also completed \\\"The Art of the Cold Call.\\\"  Nancy is a member of Toastmasters International.\",\r\n    \"city\": \"Seattle\",\r\n    \"postalCode\": \"98122\",\r\n    \"homePhone\": \"206 555-9857\",\r\n    \"title\": \"Sales Representative\",\r\n    \"titleOfCourtesy\": \"Ms.\",\r\n    \"birthDate\": \"1968-12-08\",\r\n    \"firstName\": \"Nancy\",\r\n    \"region\": \"WA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should create a new employee and return its properties."
							},
							"response": []
						},
						{
							"name": "Create employee - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78adf061-2b61-4c66-8bb1-85a0aff2d3ab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db9a0cef-59ba-48d5-a49e-d28c8f2f6c56",
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Update employee by ID');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"Davolio\",\r\n    \"country\": \"United States\",\r\n    \"hireDate\": \"1992-05-01\",\r\n    \"extension\": 5467,\r\n    \"address\": \"507 - 20th Ave. E.\\\\r\\\\nApt. 2A\",\r\n    \"notes\": \"Education includes a BA in psychology from Colorado State University.  She also completed \\\"The Art of the Cold Call.\\\"  Nancy is a member of Toastmasters International.\",\r\n    \"city\": \"Seattle\",\r\n    \"postalCode\": \"98122\",\r\n    \"homePhone\": \"206 555-9857\",\r\n    \"title\": \"Sales Representative\",\r\n    \"titleOfCourtesy\": \"Ms.\",\r\n    \"birthDate\": \"1968-12-08\",\r\n    \"firstName\": \"Nancy\",\r\n    \"region\": \"WA\",\r\n    \"id\": {{employee_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should create a new employee and return its properties."
							},
							"response": []
						},
						{
							"name": "Get employee by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2915cbd4-2b0c-4fb5-86d5-8eca68739ac1",
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Delete user by ID');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update employee by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f65b0c6-a066-4f4d-8bce-4c0b4ab6ae6f",
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"employee_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Get employee by ID');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a48cf3e0-354a-4956-a6db-8b7e390ed0a1",
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let employeeBody=pm.collectionVariables.get(\"employee_body\");\r",
											"console.log(employeeBody);\r",
											"Object.assign(employeeBody,requestBody);\r",
											"console.log(employeeBody);\r",
											"pm.collectionVariables.set(\"employee_body\",employeeBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Poland\",\r\n    \"car\": \"Volvo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51150568-bc64-4998-bcd4-5723a55b0993",
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted employee shoud be equal to employee_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"employee_id\")));\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Get employee by ID - 404');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								},
								"description": "App should delete employee with provided ID."
							},
							"response": []
						},
						{
							"name": "Get employee by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2da7c54f-3706-48fb-9f39-a50b9d3f5989",
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Delete employee by ID - 404');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete employee by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbe9a7d2-951e-4aad-a50e-414dd4fc1701",
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"employee_id\");\r",
											"pm.collectionVariables.unset(\"employee_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								},
								"description": "App should delete employee with provided ID."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Category",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "Get all customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88780576-e4e6-4865-9e2a-133c6bc88773",
										"exec": [
											"pm.test(\"Response status should be 200.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body = pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Create customer');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a718c00f-ffa1-4b80-aa11-66f31005e73d",
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"customer_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "48ca9167-43c0-4c91-a717-8ba7ca5b2d6c",
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"console.log(pm.collectionVariables.get(\"customer_id\"));\r",
											"console.log(pm.collectionVariables.get(\"customer_body\"));\r",
											"console.log(pm.response.json());\r",
											"//console.log(isEqual(object, other));\r",
											"\r",
											"pm.test(\"Status test\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"customer_id\", pm.response.json().id);\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime}ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"\r",
											"postman.setNextRequest('Get customer by Id');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"address\": \"Obere Str. 57\",\r\n    \"city\": \"Berlin\",\r\n    \"phone\": \"030-0074321\",\r\n    \"postalCode\": \"12209\",\r\n    \"name\": \"Jan Kowalski\",\r\n    \"company\": \"Alfreds Futterkiste\",\r\n    \"title\": \"Sales Representative\",\r\n    \"fax\": \"030-0076545\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50ed4e94-a469-4772-b323-38859afea0b1",
										"exec": [
											"pm.test(\"Status test\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime}ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Update customer by Id');"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"properties\": {\r\n        \"country\": \"Germany\",\r\n        \"address\": \"Obere Str. 57\",\r\n        \"phone\": \"030-0074321\",\r\n        \"city\": \"Berlin\",\r\n        \"postalCode\": \"12209\",\r\n        \"name\": \"Grzegorz Zacharski\",\r\n        \"company\": \"Alfreds Futterkiste\",\r\n        \"id\": \"Kuba\",\r\n        \"fax\": \"030-0076545\",\r\n        \"title\": \"Sales Representative\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update customer by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85ebaad3-d9c0-4b02-a055-1f49ddbdb7e2",
										"exec": [
											"pm.test(\"Status test\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime}ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"postman.setNextRequest('Delete customer by Id');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"address\": \"Obere Str. 57\",\r\n    \"city\": \"Berlin\",\r\n    \"phone\": \"030-0074321\",\r\n    \"postalCode\": \"12209\",\r\n    \"name\": \"Wojciech Zacharski\",\r\n    \"company\": \"Alfreds Futterkiste\",\r\n    \"title\": \"Sales Representative\",\r\n    \"fax\": \"030-0076545\",\r\n    \"driver\" : \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete customer by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3234fbc8-54a8-495d-94ee-ccbc62b71698",
										"exec": [
											"pm.test(\"Response should have status 200\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime}ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties 'id' and 'message'\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted employee shoud be equal to customer_id\", ()=>{\r",
											"    pm.expect(pm.response.json().id)\r",
											"            .to.be.equal(pm.collectionVariables.get(\"customer_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"postman.setNextRequest('Check if customer deleted');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if customer is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a543a55-86e5-443b-93a9-aea43d97e947",
										"exec": [
											"pm.test(\"Response should have status 404\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime}ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset(\"customer_id\");\r",
											"pm.collectionVariables.unset(\"customer_body\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Create product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"unitPrice\": 0.0,\r\n    \"unitsInStock\": 39,\r\n    \"reorderLevel\": 10,\r\n    \"name\": \"Chai\",\r\n    \"quantityPerUnit\": \"10 boxes x 20 bags\",\r\n    \"discontinued\": 0,\r\n    \"unitsOnOrder\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by Id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"United Kingdom\",\r\n    \"address\": \"49 Gilbert St.\",\r\n    \"contactTitle\": \"Purchasing Manager\",\r\n    \"city\": \"London\",\r\n    \"phone\": \"(171) 555-2222\",\r\n    \"contactName\": \"Charlotte Cooper\",\r\n    \"postalCode\": \"EC1 4SD\",\r\n    \"companyName\": \"Exotic Liquids\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/products/31063",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"31063"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by Id",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"Warszawa\",\r\n    \"year\" : 1990\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers/31063",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"31063"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Shipper",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Create supplier",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Poland\",\r\n    \"address\": \"49 Gilbert St.\",\r\n    \"contactTitle\": \"Purchasing Manager\",\r\n    \"city\": \"Warsaw\",\r\n    \"phone\": \"(171) 555-2222\",\r\n    \"contactName\": \"Charlotte Cooper\",\r\n    \"postalCode\": \"EC1 4SD\",\r\n    \"companyName\": \"Exotic Liquids\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get supplier by Id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"United Kingdom\",\r\n    \"address\": \"49 Gilbert St.\",\r\n    \"contactTitle\": \"Purchasing Manager\",\r\n    \"city\": \"London\",\r\n    \"phone\": \"(171) 555-2222\",\r\n    \"contactName\": \"Charlotte Cooper\",\r\n    \"postalCode\": \"EC1 4SD\",\r\n    \"companyName\": \"Exotic Liquids\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers/31063",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"31063"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update supplier by Id",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"Warszawa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers/31063",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"31063"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete supplier by Id",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/31063",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"31063"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all suppliers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "a4e9d55d-010e-44b6-a437-3b531ef1ac3f",
			"key": "customer_body",
			"value": ""
		},
		{
			"id": "c4872ba0-3896-4079-9527-bbe7291c6c23",
			"key": "customer_id",
			"value": ""
		},
		{
			"id": "c8325dca-3fea-44f0-9c99-e89ccc79794e",
			"key": "employee_body",
			"value": ""
		},
		{
			"id": "06697ef0-b67f-40a6-8bd8-a3555eab8fe0",
			"key": "employee_id",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}