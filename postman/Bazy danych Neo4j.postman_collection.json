{
	"info": {
		"_postman_id": "157076a3-9634-424c-97ed-9920d244bbfd",
		"name": "Bazy danych Neo4j",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Simple CRUD",
			"item": [
				{
					"name": "Employee",
					"item": [
						{
							"name": "Get all employees",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body=pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should return all employees with theirs properties."
							},
							"response": []
						},
						{
							"name": "Create employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"employee_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"employee_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"employee_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"Davolio\",\r\n    \"country\": \"United States\",\r\n    \"hireDate\": \"1992-05-01\",\r\n    \"extension\": 5467,\r\n    \"address\": \"507 - 20th Ave. E.\\\\r\\\\nApt. 2A\",\r\n    \"notes\": \"Education includes a BA in psychology from Colorado State University.  She also completed \\\"The Art of the Cold Call.\\\"  Nancy is a member of Toastmasters International.\",\r\n    \"city\": \"Seattle\",\r\n    \"postalCode\": \"98122\",\r\n    \"homePhone\": \"206 555-9857\",\r\n    \"title\": \"Sales Representative\",\r\n    \"titleOfCourtesy\": \"Ms.\",\r\n    \"birthDate\": \"1968-12-08\",\r\n    \"firstName\": \"Nancy\",\r\n    \"region\": \"WA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should create a new employee and return its properties."
							},
							"response": []
						},
						{
							"name": "Create employee - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"Davolio\",\r\n    \"country\": \"United States\",\r\n    \"hireDate\": \"1992-05-01\",\r\n    \"extension\": 5467,\r\n    \"address\": \"507 - 20th Ave. E.\\\\r\\\\nApt. 2A\",\r\n    \"notes\": \"Education includes a BA in psychology from Colorado State University.  She also completed \\\"The Art of the Cold Call.\\\"  Nancy is a member of Toastmasters International.\",\r\n    \"city\": \"Seattle\",\r\n    \"postalCode\": \"98122\",\r\n    \"homePhone\": \"206 555-9857\",\r\n    \"title\": \"Sales Representative\",\r\n    \"titleOfCourtesy\": \"Ms.\",\r\n    \"birthDate\": \"1968-12-08\",\r\n    \"firstName\": \"Nancy\",\r\n    \"region\": \"WA\",\r\n    \"id\": {{employee_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees"
									]
								},
								"description": "App should create a new employee and return its properties."
							},
							"response": []
						},
						{
							"name": "Get employee by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update employee by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"employee_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"employee_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"employee_body\",body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Poland\",\r\n    \"car\": \"Volvo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete employee by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted employee shoud be equal to employee_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"employee_id\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								},
								"description": "App should delete employee with provided ID."
							},
							"response": []
						},
						{
							"name": "Get employee by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete employee by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"employee_id\");\r",
											"pm.collectionVariables.unset(\"employee_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/employees/{{employee_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"employees",
										"{{employee_id}}"
									]
								},
								"description": "App should delete employee with provided ID."
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body=pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/categories",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"category_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"category_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    console.log(requestBody);\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"category_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Beverages\",\r\n    \"description\": \"Soft drinks, coffees, teas, beers, and ales\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/categories",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Beverages\",\r\n    \"description\": \"Soft drinks, coffees, teas, beers, and ales\",\r\n    \"id\": {{category_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/categories",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/categories/{{category_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update category by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"category_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"category_body\",body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"category_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Beverages 2\",\r\n    \"date\": \"2020-12-11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/categories/{{category_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted category shoud be equal to category_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"category_id\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/categories/{{category_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/categories/{{category_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete category by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"category_id\");\r",
											"pm.collectionVariables.unset(\"category_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/categories/{{category_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"categories",
										"{{category_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "Get all customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body=pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"customer_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"customer_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"customer_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"address\": \"Obere Str. 57\",\r\n    \"city\": \"Berlin\",\r\n    \"phone\": \"030-0074321\",\r\n    \"postalCode\": \"12209\",\r\n    \"name\": \"Jan Kowalski\",\r\n    \"company\": \"Alfreds Futterkiste\",\r\n    \"title\": \"Sales Representative\",\r\n    \"fax\": \"030-0076545\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer - 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"address\": \"Obere Str. 57\",\r\n    \"city\": \"Berlin\",\r\n    \"phone\": \"030-0074321\",\r\n    \"postalCode\": \"12209\",\r\n    \"name\": \"Jan Kowalski\",\r\n    \"company\": \"Alfreds Futterkiste\",\r\n    \"title\": \"Sales Representative\",\r\n    \"fax\": \"030-0076545\",\r\n    \"id\": \"{{customer_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"customer_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"customer_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"customer_body\",body);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"address\": \"Obere Str. 57\",\r\n    \"city\": \"Berlin\",\r\n    \"phone\": \"030-0074321\",\r\n    \"postalCode\": \"12209\",\r\n    \"name\": \"Wojciech Zacharski\",\r\n    \"company\": \"Alfreds Futterkiste\",\r\n    \"title\": \"Sales Representative\",\r\n    \"fax\": \"030-0076545\",\r\n    \"driver\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 200\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted employee shoud be equal to customer_id\", ()=>{\r",
											"    pm.expect(pm.response.json().id)\r",
											"            .to.be.equal(pm.collectionVariables.get(\"customer_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete customer by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"customer_id\");\r",
											"pm.collectionVariables.unset(\"customer_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/customers/{{customer_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"customers",
										"{{customer_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/orders/old",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										"old"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'quantity' and 'node'.\", () => {\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const body=pm.response.json();\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"quantity\");\r",
											"    pm.expect(body.quantity).to.be.not.null;\r",
											"\r",
											"    pm.response.to.have.jsonBody(\"nodes\");\r",
											"    pm.expect(body.nodes).to.not.be.null;\r",
											"    pm.expect(body.nodes).to.not.be.empty;\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"product_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { isEqual } = require('lodash');\r",
											"\r",
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const requestBody = pm.collectionVariables.get(\"product_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"product_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"unitPrice\": 0.0,\r\n    \"unitsInStock\": 39,\r\n    \"reorderLevel\": 10,\r\n    \"name\": \"Chai\",\r\n    \"quantityPerUnit\": \"10 boxes x 20 bags\",\r\n    \"discontinued\": 0,\r\n    \"unitsOnOrder\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"unitPrice\": 0.0,\r\n    \"unitsInStock\": 39,\r\n    \"reorderLevel\": 10,\r\n    \"name\": \"Chai\",\r\n    \"quantityPerUnit\": \"10 boxes x 20 bags\",\r\n    \"discontinued\": 0,\r\n    \"unitsOnOrder\": 0,\r\n    \"id\" : {{product_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', response body should be equal to product_body\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"    \r",
											"    const body = pm.collectionVariables.get(\"product_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(body,responseBody)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update product by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"product_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"product_body\",body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"\r",
											"    const requestBody = pm.collectionVariables.get(\"product_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"unitPrice\": 0.0,\r\n    \"unitsInStock\": 39,\r\n    \"reorderLevel\": 10,\r\n    \"name\": \"Chai\",\r\n    \"quantityPerUnit\": \"10 boxes x 20 bags\",\r\n    \"discontinued\": 0,\r\n    \"unitsOnOrder\": 0,\r\n    \"year\": 1990\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 200\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted product shoud be equal to product_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"product_id\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete product by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"product_id\");\r",
											"pm.collectionVariables.unset(\"product_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipper",
					"item": [
						{
							"name": "Get all shippers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/shippers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create shipper",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"shipper_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"\r",
											"    const requestBody = pm.collectionVariables.get(\"shipper_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"shipper_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \"(503) 555-9831\",\r\n    \"companyName\": \"Speedy Express\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/shippers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create shipper - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \"(503) 555-9831\",\r\n    \"companyName\": \"Speedy Express\",\r\n    \"id\": {{shipper_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/shippers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shipper by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', response body should be equal to shipper_body\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"    \r",
											"    const body = pm.collectionVariables.get(\"shipper_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(body,responseBody)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/shippers/{{shipper_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers",
										"{{shipper_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update shipper by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"shipper_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"shipper_body\",body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"\r",
											"    const requestBody = pm.collectionVariables.get(\"shipper_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyName\": \"Speedy Express\",\r\n    \"gender\" : \"male\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/shippers/{{shipper_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers",
										"{{shipper_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete shipper by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 200\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted shipper shoud be equal to shipper_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"shipper_id\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/shippers/{{shipper_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers",
										"{{shipper_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shipper by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/shippers/{{shipper_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers",
										"{{shipper_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete shipper by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"shipper_id\");\r",
											"pm.collectionVariables.unset(\"shipper_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/shippers/{{shipper_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"shippers",
										"{{shipper_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Get all suppliers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"pm.collectionVariables.set(\"supplier_body\",requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200 or 201.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"\r",
											"    const requestBody = pm.collectionVariables.get(\"supplier_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"supplier_id\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Poland\",\r\n    \"address\": \"49 Gilbert St.\",\r\n    \"contactTitle\": \"Purchasing Manager\",\r\n    \"city\": \"Warsaw\",\r\n    \"phone\": \"(171) 555-2222\",\r\n    \"contactName\": \"Charlotte Cooper\",\r\n    \"postalCode\": \"EC1 4SD\",\r\n    \"companyName\": \"Exotic Liquids\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create supplier - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500.\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime = Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have property 'error'.\", ()=>{\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Poland\",\r\n    \"address\": \"49 Gilbert St.\",\r\n    \"contactTitle\": \"Purchasing Manager\",\r\n    \"city\": \"Warsaw\",\r\n    \"phone\": \"(171) 555-2222\",\r\n    \"contactName\": \"Charlotte Cooper\",\r\n    \"postalCode\": \"EC1 4SD\",\r\n    \"companyName\": \"Exotic Liquids\",\r\n    \"id\" : {{supplier_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get supplier by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id', response body should be equal to supplier_body\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"    \r",
											"    const body = pm.collectionVariables.get(\"supplier_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(body,responseBody)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/{{supplier_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"{{supplier_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update supplier by Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody=JSON.parse(pm.request.body.raw);\r",
											"let body=pm.collectionVariables.get(\"supplier_body\");\r",
											"Object.assign(body,requestBody);\r",
											"pm.collectionVariables.set(\"supplier_body\",body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Except property 'id' request and response bodies should be equal.\", () => {\r",
											"    const { isEqual } = require('lodash');\r",
											"\r",
											"    const requestBody = pm.collectionVariables.get(\"supplier_body\");\r",
											"    let responseBody = pm.response.json();\r",
											"    delete responseBody.id;\r",
											"\r",
											"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"Warszawa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/suppliers/{{supplier_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"{{supplier_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete supplier by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 200\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have properties: 'id' and 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
											"    pm.expect(pm.response).to.have.jsonBody(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id of deleted supplier shoud be equal to supplier_id\", ()=>{\r",
											"    pm.expect(Number.parseInt(pm.response.json().id))\r",
											"            .to.be.equal(Number.parseInt(pm.collectionVariables.get(\"supplier_id\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/{{supplier_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"{{supplier_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get supplier by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/{{supplier_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"{{supplier_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete supplier by ID - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response should have status 404.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should have only one property 'message'.\", () => {\r",
											"    pm.expect(pm.response).to.be.json;\r",
											"    pm.expect(pm.response).to.have.jsonBody('message');\r",
											"    pm.expect(pm.response).to.not.have.jsonBody('id');\r",
											"    pm.expect(Object.keys(pm.response.json()).length).to.be.equal(1);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"supplier_id\");\r",
											"pm.collectionVariables.unset(\"supplier_body\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/{{supplier_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										"{{supplier_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Relationship",
					"item": [
						{
							"name": "Get Products supplied by Supplier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/:id/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										":id",
										"products"
									],
									"variable": [
										{
											"key": "id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Supplies which supply Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/products/:id/suppliers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"products",
										":id",
										"suppliers"
									],
									"variable": [
										{
											"key": "id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Supplies relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 500. Relation between product already exists\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
											"});\r",
											"\r",
											"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
											"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/suppliers/:supplier/products/:product",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"suppliers",
										":supplier",
										"products",
										":product"
									],
									"variable": [
										{
											"key": "supplier",
											"value": "3"
										},
										{
											"key": "product",
											"value": "3"
										}
									]
								},
								"description": "Create relation between Supplier and Product"
							},
							"response": []
						},
						{
							"name": "Get all Contains relationships",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200.\", ()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/orders/products/all",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										"products",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contains relationship by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Order CRUD",
			"item": [
				{
					"name": "All Customer's Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerId\": \"ALFKI\",\r\n    \"productId\": 1,\r\n    \"orderDate\": \"2020-01-01\",\r\n    \"requiredDate\" : \"2020-06-01\",\r\n    \"shippedDate\" : \"2020-01-05\",\r\n    \"freight\" : 1,\r\n    \"shipName\" : \"Grdgtr Gdx Ivgjov\",\r\n    \"shipAddress\" : \"Evydnh St. 57\",\r\n    \"shipCity\" : \"Waviyoyim\",\r\n    \"shipPostalCode\" : \"9154-92838\",\r\n    \"shipCountry\" : \"Sweden\",\r\n    \"unitPrice\" : 21.79,\r\n    \"quantity\" : 1,\r\n    \"discount\" : 4.5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contains Relationship between Order and Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/orders/:order/products/:product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders",
								":order",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "order",
									"value": "2972501051"
								},
								{
									"key": "product",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contains Relationship",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"unitPrice\" : 14.89,\r\n    \"quantity\" : \"16\",\r\n    \"discount\" : \"12.5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/orders/:order/products/:product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders",
								":order",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "order",
									"value": "2972501051"
								},
								{
									"key": "product",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/orders/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2972501051"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order - many product in one Order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customer\": {\r\n            \"country\": \"Mexico\",\r\n            \"address\": \"Mataderos  2312\",\r\n            \"city\": \"M?xico D.F.\",\r\n            \"phone\": \"(5) 555-3932\",\r\n            \"postalCode\": \"5023\",\r\n            \"name\": \"Antonio Moreno\",\r\n            \"company\": \"Antonio Moreno Taquer?a\",\r\n            \"id\": \"ANTON\",\r\n            \"title\": \"Owner\"\r\n        },\r\n    \"orderProperties\":{\r\n            \"shipCity\": \"Reims\",\r\n            \"freight\": 0,\r\n            \"requiredDate\": \"1996-08-01\",\r\n            \"shipName\": \"Vins et alcools Chevalier\",\r\n            \"shipPostalCode\": \"51100\",\r\n            \"shipCountry\": \"France\",\r\n            \"shippedDate\": \"1996-07-16\",\r\n            \"orderDate\": \"1996-07-04\",\r\n            \"shipAddress\": \"59 rue de l''Abbaye\"\r\n        },\r\n    \"orderDetails\": [\r\n            {\r\n                \"productId\": 22,\r\n                \"unitPrice\": 20.00,\r\n                \"quantity\": 1,\r\n                \"discount\" : 5.5\r\n            },\r\n            {\r\n                \"productId\": 23,\r\n                \"unitPrice\": 10.99,\r\n                \"quantity\": 2,\r\n                \"discount\" : 0\r\n            }\r\n        ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders - existing",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customer\": {\r\n            \"country\": \"Mexico\",\r\n            \"address\": \"Mataderos  2312\",\r\n            \"city\": \"M?xico D.F.\",\r\n            \"phone\": \"(5) 555-3932\",\r\n            \"postalCode\": \"5023\",\r\n            \"name\": \"Antonio Moreno\",\r\n            \"company\": \"Antonio Moreno Taquer?a\",\r\n            \"id\": \"ANTON\",\r\n            \"title\": \"Owner\"\r\n        },\r\n    \"orderProperties\":{\r\n            \"shipCity\": \"Reims\",\r\n            \"freight\": 1,\r\n            \"requiredDate\": \"1996-08-01\",\r\n            \"id\": 131693,\r\n            \"shipName\": \"Vins et alcools Chevalier\",\r\n            \"shipPostalCode\": \"51100\",\r\n            \"shipCountry\": \"France\",\r\n            \"shippedDate\": \"1996-07-16\",\r\n            \"orderDate\": \"1996-07-04\",\r\n            \"shipAddress\": \"59 rue de l''Abbaye\"\r\n        },\r\n    \"orderDetails\": [\r\n            {\r\n                \"productId\": 32,\r\n                \"odID\": 214340,\r\n                \"unitPrice\": 8.99,\r\n                \"quantity\": 0,\r\n                \"discount\" : 5.0\r\n            }\r\n        ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/orders/existing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders",
								"existing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders - new",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customer\": {\r\n            \"country\": \"Mexico\",\r\n            \"address\": \"Mataderos  2312\",\r\n            \"city\": \"M?xico D.F.\",\r\n            \"phone\": \"(5) 555-3932\",\r\n            \"postalCode\": \"5023\",\r\n            \"name\": \"Antonio Moreno\",\r\n            \"company\": \"Antonio Moreno Taquer?a\",\r\n            \"id\": \"ANTON\",\r\n            \"title\": \"Owner\"\r\n        },\r\n    \"orderProperties\":{\r\n            \"shipCity\": \"Reims\",\r\n            \"freight\": 1,\r\n            \"requiredDate\": \"1996-08-01\",\r\n            \"id\": 131693,\r\n            \"shipName\": \"Vins et alcools Chevalier\",\r\n            \"shipPostalCode\": \"51100\",\r\n            \"shipCountry\": \"France\",\r\n            \"shippedDate\": \"1996-07-16\",\r\n            \"orderDate\": \"1996-07-04\",\r\n            \"shipAddress\": \"59 rue de l''Abbaye\"\r\n        },\r\n    \"orderDetails\": [\r\n            {\r\n                \"productId\": 32,\r\n                \"unitPrice\": 8.99,\r\n                \"quantity\": 0,\r\n                \"discount\" : 5.0\r\n            }\r\n        ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/orders/new",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"orders",
								"new"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "Customers served by Supplier (many simple queries)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/stats/suppliers/:id/customers/:from/:to/manyqueries",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"stats",
								"suppliers",
								":id",
								"customers",
								":from",
								":to",
								"manyqueries"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								},
								{
									"key": "from",
									"value": "1999-12-01"
								},
								{
									"key": "to",
									"value": "2001-02-12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Customers served by Supplier (one complex query)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/stats/suppliers/:id/customers/:from/:to/onequery",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"stats",
								"suppliers",
								":id",
								"customers",
								":from",
								":to",
								"onequery"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								},
								{
									"key": "from",
									"value": "1999-12-01"
								},
								{
									"key": "to",
									"value": "2001-02-12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stats for Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/:id/stats",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								":id",
								"stats"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stats for Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200.\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"const resTime=Number.parseInt(pm.environment.get(\"responseTime\"));\r",
									"pm.test(`Response time should be less than ${4*resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4*resTime);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/categories/:id/stats",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"categories",
								":id",
								"stats"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "order_body",
			"value": ""
		}
	]
}