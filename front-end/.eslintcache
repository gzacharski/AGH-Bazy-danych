[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/layouts/Page.js":"3","/app/src/layouts/Footer.js":"4","/app/src/layouts/header/Header.js":"5","/app/src/layouts/navbar/Navbar.js":"6","/app/src/layouts/navbar/NavbarData.js":"7","/app/src/pages/Home.js":"8","/app/src/pages/Orders.js":"9","/app/src/pages/Customers.js":"10","/app/src/pages/StatsCategories.js":"11","/app/src/pages/StatsProducts.js":"12","/app/src/pages/Categories.js":"13","/app/src/pages/Products.js":"14","/app/src/pages/Suppliers.js":"15","/app/src/config/config.js":"16","/app/src/components/table/Table.js":"17","/app/src/components/table/TableConfig.js":"18","/app/src/components/table/RowActions.js":"19","/app/src/components/table/TableHeader.js":"20","/app/src/components/table/TableFilter.js":"21","/app/src/components/table/TableFooter.js":"22","/app/src/components/table/TablePagination.js":"23","/app/src/components/buttons/AddButton.js":"24","/app/src/components/buttons/ConfigButton.js":"25","/app/src/components/dialogs/ConfigDialog.js":"26","/app/src/components/dialogs/editRowDialogs/EditProductDialog.js":"27","/app/src/components/dialogs/editRowDialogs/EditOrderDialog.js":"28","/app/src/components/dialogs/infoRowDialogs/OrderInfoDialog.js":"29","/app/src/components/dialogs/infoRowDialogs/ProductInfoDialog.js":"30","/app/src/components/dialogs/addRowDialogs/AddProductDialog.js":"31","/app/src/components/dialogs/addRowDialogs/AddCustomerDialog.js":"32","/app/src/components/dialogs/addRowDialogs/AddSupplierDialog.js":"33","/app/src/components/dialogs/addRowDialogs/AddOrderDialog.js":"34","/app/src/components/dialogs/addRowDialogs/AddCategoryDialog.js":"35","/app/src/components/dialogs/RemoveRowDialog.js":"36","/app/src/components/buttons/RemoveButton.js":"37","/app/src/components/buttons/InfoButton.js":"38","/app/src/components/dialogs/editRowDialogs/EditRowDialog.js":"39","/app/src/components/dialogs/infoRowDialogs/MoreRowInfoDialog.js":"40","/app/src/components/dialogs/infoRowDialogs/ProductOrderDetailsDialogDisabled.js":"41","/app/src/components/dialogs/editRowDialogs/ProductOrderDetailsDialog.js":"42","/app/src/components/dialogs/addRowDialogs/ProductOrderDetailsDialog.js":"43","/app/src/components/buttons/EditButton.js":"44"},{"size":183,"mtime":1609799119586,"results":"45","hashOfConfig":"46"},{"size":727,"mtime":1610061284813,"results":"47","hashOfConfig":"46"},{"size":1285,"mtime":1611280227887,"results":"48","hashOfConfig":"46"},{"size":516,"mtime":1609615039935,"results":"49","hashOfConfig":"46"},{"size":611,"mtime":1611353122045,"results":"50","hashOfConfig":"46"},{"size":1251,"mtime":1609615039938,"results":"51","hashOfConfig":"46"},{"size":1241,"mtime":1611280227887,"results":"52","hashOfConfig":"46"},{"size":169,"mtime":1609615039941,"results":"53","hashOfConfig":"46"},{"size":4490,"mtime":1611330211597,"results":"54","hashOfConfig":"46"},{"size":6999,"mtime":1610474602016,"results":"55","hashOfConfig":"46"},{"size":3617,"mtime":1611314240179,"results":"56","hashOfConfig":"46"},{"size":2476,"mtime":1611314240180,"results":"57","hashOfConfig":"46"},{"size":5540,"mtime":1611280227888,"results":"58","hashOfConfig":"46"},{"size":6331,"mtime":1611280227889,"results":"59","hashOfConfig":"46"},{"size":7025,"mtime":1611280227890,"results":"60","hashOfConfig":"46"},{"size":41,"mtime":1610409363224,"results":"61","hashOfConfig":"46"},{"size":5619,"mtime":1611166449052,"results":"62","hashOfConfig":"46"},{"size":693,"mtime":1609877269370,"results":"63","hashOfConfig":"46"},{"size":4341,"mtime":1611280227886,"results":"64","hashOfConfig":"46"},{"size":292,"mtime":1609791977095,"results":"65","hashOfConfig":"46"},{"size":712,"mtime":1610061284820,"results":"66","hashOfConfig":"46"},{"size":376,"mtime":1609791977095,"results":"67","hashOfConfig":"46"},{"size":2525,"mtime":1610061284821,"results":"68","hashOfConfig":"46"},{"size":1976,"mtime":1611280227882,"results":"69","hashOfConfig":"46"},{"size":540,"mtime":1610061284814,"results":"70","hashOfConfig":"46"},{"size":1367,"mtime":1609877269384,"results":"71","hashOfConfig":"46"},{"size":12981,"mtime":1611280227885,"results":"72","hashOfConfig":"46"},{"size":16236,"mtime":1611335801328,"results":"73","hashOfConfig":"46"},{"size":5040,"mtime":1611285081528,"results":"74","hashOfConfig":"46"},{"size":5148,"mtime":1611280227885,"results":"75","hashOfConfig":"46"},{"size":12529,"mtime":1611280227884,"results":"76","hashOfConfig":"46"},{"size":8156,"mtime":1610474602012,"results":"77","hashOfConfig":"46"},{"size":7859,"mtime":1610474602013,"results":"78","hashOfConfig":"46"},{"size":15074,"mtime":1611322693118,"results":"79","hashOfConfig":"46"},{"size":4947,"mtime":1610474602011,"results":"80","hashOfConfig":"46"},{"size":2431,"mtime":1610474602010,"results":"81","hashOfConfig":"46"},{"size":539,"mtime":1610061284816,"results":"82","hashOfConfig":"46"},{"size":539,"mtime":1610061284815,"results":"83","hashOfConfig":"46"},{"size":3645,"mtime":1611166449048,"results":"84","hashOfConfig":"46"},{"size":1653,"mtime":1611166449049,"results":"85","hashOfConfig":"46"},{"size":2000,"mtime":1611285081529,"results":"86","hashOfConfig":"46"},{"size":2435,"mtime":1611330211597,"results":"87","hashOfConfig":"46"},{"size":2483,"mtime":1611188825510,"results":"88","hashOfConfig":"46"},{"size":533,"mtime":1609877269362,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1fhvnvw",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"/app/src/index.js",[],["190","191"],"/app/src/App.js",[],"/app/src/layouts/Page.js",[],"/app/src/layouts/Footer.js",[],"/app/src/layouts/header/Header.js",["192"],"import React from 'react';\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\nimport '../navbar/Navbar.css';\r\nimport {BiSearch} from 'react-icons/bi'\r\n\r\nexport default function Header(props){\r\n    const {showSidebar} = props;\r\n    return(\r\n        <header className=\"navbar bg-light\">\r\n            <div className='navbar-brand'>\r\n                <Link to='#' className='menu-bars'>\r\n                    <FaIcons.FaBars onClick={showSidebar} />\r\n                </Link>\r\n                <span>Northwind Database - Neo4j</span>\r\n            </div>\r\n        </header>\r\n    );\r\n}","/app/src/layouts/navbar/Navbar.js",[],"/app/src/layouts/navbar/NavbarData.js",[],"/app/src/pages/Home.js",[],"/app/src/pages/Orders.js",[],"/app/src/pages/Customers.js",[],"/app/src/pages/StatsCategories.js",["193"],"import axios from 'axios';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {MenuItem, Snackbar, TextField} from '@material-ui/core';\r\nimport Table from '../components/table/Table';\r\nimport { url } from '../config/config';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function StatsCategories() {\r\n    const columns = [\r\n        { Header: 'Category Name', accessor: 'categoryName' },\r\n        { Header: 'Total Income Generated', accessor: 'totalIncomeGenerated' },\r\n        { Header: 'Total Units Sold', accessor: 'totalUnitsSold' },\r\n        { Header: 'Average Price', accessor: 'averagePrice' },\r\n        { Header: 'Average Discount', accessor: 'averageDiscount' },\r\n        { Header: 'Total Units In Stock', accessor: 'totalUnitsInStock' },\r\n        { Header: 'Most Sold Product', accessor: 'mostSoldProduct' },\r\n        { Header: 'Units Sold Of Most Sold Product', accessor: 'mostSoldProductUnitsSold' },\r\n        { Header: 'Supplier For Most Sold Product', accessor: 'mostSoldProductSupplier' }\r\n    ];\r\n    const [stats, setStats] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [openSnackbar, setOpenSnackbar] = useState(null);\r\n    const [response, setResponse] = useState({success: false, message: ''});\r\n    const [selectedCategory, setSelectedCategory] = useState(1)\r\n\r\n    useEffect(getCategories, [selectedCategory]);\r\n\r\n    function getCategories() {\r\n        axios.get(`${url}/stats/categories/` + selectedCategory)\r\n            .then(response => {\r\n                console.log(\"Getting stats for category \" + selectedCategory)\r\n                console.log(response.data)\r\n                setStats([response.data])\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n\r\n        axios.get(`${url}/api/categories`)\r\n            .then(response => {\r\n                console.log(\"Getting categories...\")\r\n                console.log(response.data.nodes)\r\n                setCategories(response.data.nodes)\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <TextField\r\n                    required={true}\r\n                    id=\"category\"\r\n                    select\r\n                    label=\"Select Category\"\r\n                    value={selectedCategory}\r\n                    onChange={() => console.log(\"Chosen category \" + selectedCategory)}\r\n                >\r\n                    {categories.map((category) => (\r\n                        <MenuItem key={category.id} onClick={() => setSelectedCategory(category.id)}>{category.name}</MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                <Table\r\n                    title=\"Stats for categories\"\r\n                    data={stats}\r\n                    columns={columns}\r\n                    crudActions={{}}\r\n                />\r\n            </div>\r\n            <Snackbar open={openSnackbar} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n                <Alert\r\n                    onClose={handleCloseSnackbar}\r\n                    severity={response.success ? \"success\" : \"error\"}\r\n                >\r\n                    {response.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n","/app/src/pages/StatsProducts.js",[],"/app/src/pages/Categories.js",[],"/app/src/pages/Products.js",[],"/app/src/pages/Suppliers.js",[],"/app/src/config/config.js",[],"/app/src/components/table/Table.js",[],"/app/src/components/table/TableConfig.js",[],"/app/src/components/table/RowActions.js",[],"/app/src/components/table/TableHeader.js",[],"/app/src/components/table/TableFilter.js",[],"/app/src/components/table/TableFooter.js",[],"/app/src/components/table/TablePagination.js",[],"/app/src/components/buttons/AddButton.js",[],"/app/src/components/buttons/ConfigButton.js",[],"/app/src/components/dialogs/ConfigDialog.js",[],"/app/src/components/dialogs/editRowDialogs/EditProductDialog.js",["194","195","196","197","198","199","200"],"import axios from 'axios';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n    Backdrop,\r\n    CircularProgress,\r\n    Chip,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Input,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, {useState, useEffect} from \"react\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { url } from '../../../config/config';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nexport default function EditProductDialog(props) {\r\n\r\n    const classes = useStyles();\r\n    const {onClose, open,updateRow} = props;\r\n    const [row,setRow]=useState(props.row);\r\n\r\n    const productID=row.cells.filter(cell=>cell.column.Header===\"Id\")[0].value;\r\n\r\n    const [product,setProduct]=useState(null);\r\n    const [suppliers,setSuppliers]=useState([]);\r\n    const [selectedSupplier,setSelectedSupplier]=useState(null);\r\n    const [categories, setCategories]=useState([]);\r\n    const [selectedCategories, setSelectedCategories]=useState(null);\r\n\r\n    const [openBackdrop, setOpenBackdrop] = useState(false);\r\n    const handleCloseBackdrop = () => setOpenBackdrop(false);\r\n    const handleToggleBackdrop = () => setOpenBackdrop(!openBackdrop);\r\n\r\n    const handleChange = property => ({ target: { value } }) => {\r\n        setProduct({ ...product, [property]: value })\r\n    }\r\n\r\n    const handleCancel=()=>{\r\n        setProduct(null);\r\n        setSuppliers([]);\r\n        setSelectedSupplier(null);\r\n        setCategories([]);\r\n        setSelectedCategories(null);\r\n        onClose();\r\n    }\r\n\r\n    //useEffect(loadProductByID, []);\r\n    const loadData = ()=>{\r\n        loadProductByID();\r\n        loadSuppliers();\r\n        loadCategories();\r\n    }\r\n\r\n    function loadProductByID(){\r\n        axios.get(`${url}/api/products/${productID}`)\r\n            .then(response => {\r\n                \r\n                const tempProduct=response.data.product;\r\n                setProduct({\r\n                    unitPrice: tempProduct.unitPrice,\r\n                    unitsInStock: tempProduct.unitsInStock,\r\n                    reorderLevel: tempProduct.reorderLevel,\r\n                    name: tempProduct.name,\r\n                    quantityPerUnit: tempProduct.quantityPerUnit,\r\n                    discontinued: tempProduct.discontinued,\r\n                    unitsOnOrder: tempProduct.unitsOnOrder\r\n                });\r\n                setSelectedSupplier(response.data.supplier);\r\n                setSelectedCategories(response.data.categories);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    function loadSuppliers() {\r\n        axios.get(`${url}/api/suppliers`)\r\n            .then(response => {\r\n                console.log(\"Loading suplliers...\");\r\n                console.log(response);\r\n                setSuppliers(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    function loadCategories() {\r\n        axios.get(`${url}/api/categories`)\r\n            .then(response => {\r\n                console.log(\"Loading categories...\");\r\n                console.log(response);\r\n                setCategories(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        console.log(\"Submit form..\");\r\n\r\n        handleToggleBackdrop();\r\n        onClose();\r\n\r\n        updateRow({\r\n            productID,\r\n            product,\r\n            supplier: selectedSupplier,\r\n            categories : selectedCategories\r\n        })\r\n            .then(response=>{\r\n                console.log(response);\r\n                setSelectedCategories(null);\r\n                setProduct(null);\r\n                setSelectedSupplier(null);\r\n\r\n                handleCloseBackdrop();\r\n            })\r\n            .catch(error=>{\r\n                setSelectedCategories(null);\r\n                setProduct(null);\r\n                setSelectedSupplier(null);\r\n                handleCloseBackdrop();\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleChangeCheckbox=()=>{\r\n        setProduct({...product,\r\n            discontinued : product.discontinued===0?1:0\r\n        });\r\n    }\r\n\r\n    const productDetails=()=>{\r\n        console.log({selectedSupplier,selectedCategories,product});\r\n        return(\r\n            <>\r\n                <TextField\r\n                    autoFocus\r\n                    fullWidth\r\n                    id=\"product-name\"\r\n                    label=\"Name\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={product.name}\r\n                    onChange={handleChange('name')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"product-quantity-per-unit\"\r\n                    label=\"Quantity per unit\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    defaultValue={product.quantityPerUnit}\r\n                    onChange={handleChange('quantityPerUnit')}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"product-unit-price\"\r\n                    label=\"Unit price\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    defaultValue={product.unitPrice}\r\n                    onChange={handleChange('unitPrice')}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"product-units-in-stock\"\r\n                    label=\"Units in stock\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    defaultValue={product.unitsInStock}\r\n                    onChange={handleChange('unitsInStock')}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"product-reorder-level\"\r\n                    label=\"Reorder level\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    defaultValue={product.reorderLevel}\r\n                    onChange={handleChange('reorderLevel')}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <FormControlLabel\r\n                    control={\r\n                    <Checkbox\r\n                        checked={product.discontinued===1?true:false}\r\n                        onChange={handleChangeCheckbox}\r\n                        name=\"discontinued\"\r\n                        color=\"primary\"\r\n                    />\r\n                    }\r\n                    label=\"Discontinued\"\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"product-units-on-order\"\r\n                    label=\"Units on order\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    defaultValue={product.unitsOnOrder}\r\n                    onChange={handleChange('unitsOnOrder')}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    const handleSupplierChange = (event) => {\r\n        setSelectedSupplier(event.target.value);\r\n    };\r\n\r\n    const getSupplierIndex=(id,suppliers)=>{\r\n        for(let i=0; i<suppliers.length; i++){\r\n            if(suppliers[i].id===id){\r\n                return i;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const convertSuppliersToSelectItems = () => {\r\n\r\n        const supplierSelectItems = suppliers.map(supplier => (\r\n            <MenuItem key={supplier.id} value={supplier}>\r\n                {supplier.companyName}\r\n            </MenuItem>\r\n        ));\r\n\r\n        return (\r\n            <FormControl fullWidth required>\r\n                <InputLabel id=\"supplier-select-label\">Supplier</InputLabel>\r\n                <Select\r\n                    labelId=\"supplier-select-label\"\r\n                    id=\"supplier-select\"\r\n                    value={suppliers[getSupplierIndex(selectedSupplier.id,suppliers)]}\r\n                    onChange={handleSupplierChange}\r\n                >   \r\n                    {supplierSelectItems}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n    const handleSelectedCategoriesChange = (_, selectedOptions) => {\r\n        setSelectedCategories(selectedOptions);\r\n    }\r\n\r\n    const convertCategoriesToMultipleSelect = () => {\r\n        const categoriesToShow = categories.map(category => (\r\n            <MenuItem key={category.id} value={category} selected={true}>\r\n                {category.name}\r\n            </MenuItem>\r\n        ));\r\n        \r\n        return (\r\n            <>\r\n            <Autocomplete\r\n                id=\"combo-box-category\"\r\n                multiple\r\n                fullWidth\r\n                disableCloseOnSelect\r\n                value={selectedCategories}\r\n                options={categories}\r\n                getOptionLabel={option => option.name}\r\n                getOptionSelected={(option, value) => value.id === option.id}\r\n                renderInput={params => (\r\n                    <TextField {...params} label=\"Categories\" variant=\"outlined\" fullWidth />\r\n                )}\r\n                renderOption={(option, { selected }) => (\r\n                    <>\r\n                        <Checkbox\r\n                            style={{ marginRight: 8 }}\r\n                            checked={selected}\r\n                        />\r\n                        {option.name}\r\n                    </>\r\n                )}\r\n                onChange={handleSelectedCategoriesChange}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                openBackdrop\r\n                ?\r\n                <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                    <CircularProgress color=\"primary\" />\r\n                </Backdrop>\r\n                :\r\n                <Dialog onClose={onClose} open={open} onEntered={loadData}>\r\n                    <DialogTitle>Edit Product</DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <form id=\"editForm\" className={classes.root} onSubmit={handleSubmit} noValidate>\r\n                            {\r\n                                product!==null\r\n                                ?productDetails()\r\n                                :<CircularProgress color=\"primary\"/>\r\n                            }\r\n                            {\r\n                                selectedSupplier!==null\r\n                                ?convertSuppliersToSelectItems()\r\n                                :<CircularProgress color=\"primary\"/>\r\n                            }\r\n                            {\r\n                                selectedCategories!==null\r\n                                ?convertCategoriesToMultipleSelect() \r\n                                :<CircularProgress color=\"primary\"/>\r\n                            }\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light\" onClick={handleCancel}>\r\n                            Cancel\r\n                        </button>\r\n                        <button type=\"submit\" form=\"editForm\" className=\"btn btn-light\" >\r\n                            Edit\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","/app/src/components/dialogs/editRowDialogs/EditOrderDialog.js",["201","202","203"],"import axios from \"axios\";\r\nimport {\r\n    Backdrop,\r\n    CircularProgress,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    FormControl, \r\n    InputLabel, \r\n    MenuItem,\r\n    Paper, \r\n    Select, \r\n    Snackbar,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, {useEffect, useState} from 'react';\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport {url} from \"../../../config/config\";\r\nimport ProductOrderDetailsDialog from './ProductOrderDetailsDialog';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    paper:{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        margin: 0,\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n}));\r\n\r\nconst initOrder = {\r\n    requiredDate : '',\r\n    shippedDate : '',\r\n    freight : 0,\r\n    shipName : '',\r\n    shipAddress : '',\r\n    shipCity : '',\r\n    shipPostalCode : '',\r\n    shipCountry : '',\r\n}\r\n\r\nexport default function EditRowDialog(props) {\r\n\r\n    const classes = useStyles();\r\n    const {onClose, open,updateRow} = props;\r\n    const [row,setRow]=useState(props.row);\r\n\r\n    const [order,setOrder] = useState(null);\r\n    const [customer, setCustomer] = useState(null);\r\n    const [customers, setCustomers] = useState(null);\r\n    const [product, setProduct] = useState('');\r\n    const [products, setProducts] = useState(null);\r\n    const [openBackdrop, setOpenBackdrop] = useState(false);\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [responseSuccess,setResponseSuccess]=useState(false);\r\n    const [productsAddedToOrder,setProductsAddedToOrder]=useState([]);\r\n    const [openChipDialog,setOpenChipDialog]=useState(false);\r\n\r\n    const orderID=row.cells.filter(cell=>cell.column.Header===\"Id\")[0].value;\r\n\r\n    const loadOrderByID=()=>{\r\n        console.log(`Entering...${orderID}`);\r\n\r\n        axios.get(`${url}/api/orders/${orderID}`)\r\n            .then(response => {\r\n                console.log(\"Loading product details...\");\r\n                console.log(response);\r\n                setOrder(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n\r\n        axios.get(`${url}/api/orders/${orderID}/customer/orderdetails`)\r\n            .then(response => {\r\n                console.log(\"Loading product details...\");\r\n                console.log(response);\r\n\r\n                setCustomer(response.data.customerId[0]);\r\n                console.log(response.data.customerId[0]);\r\n                setProductsAddedToOrder(response.data.orderDetailsResult);\r\n                console.log(response.data.orderDetailsResult);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n    \r\n    useEffect(loadCustomers, []);\r\n\r\n    function loadCustomers() {\r\n        axios.get(`${url}/api/customers`)\r\n            .then(response => {\r\n                console.log(\"Loading customers...\");\r\n                console.log(response);\r\n                setCustomers(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    useEffect(loadProducts, []);\r\n\r\n    function loadProducts() {\r\n        axios.get(`${url}/api/products`)\r\n            .then(response => {\r\n                console.log(\"Loading products...\");\r\n                console.log(response);\r\n                setProducts(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleCloseBackdrop = () => {\r\n        setOpenBackdrop(false);\r\n    };\r\n    const handleToggleBackdrop = () => {\r\n        setOpenBackdrop(!openBackdrop);\r\n    };\r\n\r\n    const handleChange = property => ({ target: { value } }) => {\r\n        setOrder({ ...order, [property]: value })\r\n    }\r\n\r\n    const handleClickSnackbar = () => {\r\n        setOpenSnackbar(true);\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    const handleCustomerChange = (event) => {\r\n        setCustomer(event.target.value);\r\n    };\r\n\r\n    const handleProductChange = (event) => {\r\n        console.log(event.target.value);\r\n        setProduct(event.target.value);\r\n        const tempProduct={\r\n            product: event.target.value,\r\n            unitPrice : 0,\r\n            quantity : 0,\r\n            discount :0\r\n        }\r\n        setProductsAddedToOrder([...productsAddedToOrder,tempProduct])\r\n        console.log(\"Products in order\");\r\n        console.log(tempProduct);\r\n    }\r\n\r\n    const updateOrder = () => {\r\n        console.log(\"Adding order...\");\r\n\r\n        const tempOrderDetails=productsAddedToOrder.map(product=>({\r\n            productId: Number.parseInt(product.product.id),\r\n            unitPrice: Number.parseInt(product.unitPrice),\r\n            quantity : Number.parseInt(product.quantity),\r\n            discount : Number.parseInt(product.discount)\r\n        }));\r\n\r\n        setResponseSuccess(false);\r\n        handleToggleBackdrop();\r\n        onClose();\r\n        axios\r\n            //.put(`${url}/api/orders/new`, {\r\n            .put(`${url}/api/orders/new`, {\r\n                orderProperties : order,\r\n                customer : customer,\r\n                orderDetails : tempOrderDetails,\r\n            })\r\n            .then(response => {\r\n                console.log(response);\r\n                \r\n                if(response.status===201 || response.status===200){\r\n                    setResponseSuccess(true);\r\n                    setOrder(null);\r\n                    setCustomer(null);\r\n                    setProduct('');\r\n                    setProductsAddedToOrder([]);\r\n                    //updateRow(response.data.orderProperties);\r\n                }else{\r\n                    setResponseSuccess(false);\r\n                }\r\n                \r\n                handleCloseBackdrop();\r\n                handleClickSnackbar();\r\n            })\r\n            .catch(error => {\r\n                setResponseSuccess(false);\r\n                handleCloseBackdrop();\r\n                handleClickSnackbar();\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const getCustomerIndex=(id,customers)=>{\r\n        for(let i=0; i<customers.length; i++){\r\n            if(customers[i].id===id){\r\n                return i;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const convertCustomerToSelectItems = () => {\r\n\r\n        const customerSelectItems = customers.map(customer => (\r\n            <MenuItem key={customer.id} value={customer}>\r\n                {customer.name}\r\n            </MenuItem>\r\n        ));\r\n\r\n\r\n        return (\r\n            <>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id=\"customer-select-label\">Customer</InputLabel>\r\n                    <Select\r\n                        labelId=\"customer-select-label\"\r\n                        id=\"customer-select\"\r\n                        value={customers[getCustomerIndex(customer.id,customers)]}\r\n                        onChange={handleCustomerChange}\r\n                    >\r\n                        {customerSelectItems}\r\n                    </Select>\r\n                </FormControl>\r\n            </>\r\n        );\r\n    }\r\n\r\n    const convertProductToSelectItems = () => {\r\n\r\n        const productSelectItems = products.map(product => (\r\n            <MenuItem key={product.id} value={product}>\r\n                {product.name}\r\n            </MenuItem>\r\n        ));\r\n\r\n        return (\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"product-select-label\">Add product</InputLabel>\r\n                <Select\r\n                    labelId=\"product-select-label\"\r\n                    id=\"product-select\"\r\n                    value={product}\r\n                    onChange={handleProductChange}\r\n                >\r\n                    {productSelectItems}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n    const removeProductFromOrder=(removedProduct)=>{\r\n        console.log(`removed ${removedProduct.product.name}`);\r\n        const tempProductAddedToOrder=productsAddedToOrder\r\n            .filter(product =>product.product.id!==removedProduct.product.id);\r\n        setProductsAddedToOrder(tempProductAddedToOrder);\r\n    }\r\n\r\n    const [productDetails,setProductDetails]=useState(null);\r\n\r\n    const openProductDetailsDialog=(product)=>{\r\n        setProductDetails(product);\r\n        setOpenChipDialog(true);\r\n        console.log(`Chiped cliked ${product.product.name}`);\r\n        console.log(product);\r\n    }\r\n\r\n    const updateProductsAddedToOrder=(updatedProduct)=>{\r\n        console.log(\"Update product added to order\");\r\n        console.log(updatedProduct);\r\n        console.log(productsAddedToOrder);\r\n\r\n        setProductDetails(null);\r\n        const tempProductsAddedToOrder=productsAddedToOrder\r\n            .filter(product=>product.product.id!==updatedProduct.product.id);\r\n        \r\n        setProductsAddedToOrder(tempProductsAddedToOrder.concat(updatedProduct));\r\n    }\r\n\r\n    const handleCloseChipDialog=()=>{\r\n        setOpenChipDialog(false);\r\n        setProductDetails(null);\r\n    }\r\n\r\n    const showProducts=()=>{\r\n        const temProducts=productsAddedToOrder.map(product =>\r\n            <li key={product.product.id}>\r\n                <Chip \r\n                    label={product.product.name} \r\n                    className={classes.chip}\r\n                    onDelete={()=>removeProductFromOrder(product)}\r\n                    onClick={()=>openProductDetailsDialog(product)}\r\n                />\r\n            </li>\r\n        );\r\n        \r\n        return (\r\n            <Paper component=\"ul\" className={classes.paper}>\r\n                {temProducts}\r\n                {productDetails!==null?\r\n                    <ProductOrderDetailsDialog\r\n                        onClose={handleCloseChipDialog}\r\n                        open={openChipDialog}\r\n                        product={productDetails}\r\n                        add={updateProductsAddedToOrder}\r\n                    />\r\n                    :null\r\n                }\r\n            </Paper>\r\n        )\r\n    };\r\n\r\n    const handleCancelUpdateOrder=()=>{\r\n        setOrder(null);\r\n        setCustomer(null);\r\n        setProduct(null);\r\n        setProductsAddedToOrder([]);\r\n        onClose();\r\n    }\r\n\r\n    const showOrderInfo= () =>{\r\n\r\n        return(\r\n            <>\r\n                <TextField\r\n                    autoFocus\r\n                    fullWidth\r\n                    id=\"required-date\"\r\n                    label=\"Required Date\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"date\"\r\n                    value={order.requiredDate}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                    onChange={handleChange('requiredDate')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"shipped-date\"\r\n                    label=\"Shipped Date\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"date\"\r\n                    value={order.shippedDate}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                    onChange={handleChange('shippedDate')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"freight\"\r\n                    label=\"Freight\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={order.freight}\r\n                    onChange={handleChange('freight')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"ship-name\"\r\n                    label=\"Ship Name\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={order.shipName}\r\n                    onChange={handleChange('shipName')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"ship-address\"\r\n                    label=\"Ship Address\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={order.shipAddress}\r\n                    onChange={handleChange('shipAddress')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"ship-city\"\r\n                    label=\"Ship City\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={order.shipCity}\r\n                    onChange={handleChange('shipCity')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"ship-postal-code\"\r\n                    label=\"Ship Postal Code\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={order.shipPostalCode}\r\n                    onChange={handleChange('shipPostalCode')}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"ship-country\"\r\n                    label=\"Ship Country\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"text\"\r\n                    value={order.shipCountry}\r\n                    onChange={handleChange('shipCountry')}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {openBackdrop\r\n                ?\r\n                <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                    <CircularProgress color=\"primary\" />\r\n                </Backdrop>\r\n                :\r\n                <Dialog\r\n                    aria-labelledby=\"dialog-add-entity\"\r\n                    onClose={onClose}\r\n                    open={open}\r\n                    onEntered={loadOrderByID}\r\n                >\r\n                    <DialogTitle>Update order</DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        {(customers !== null && customer !==null)? convertCustomerToSelectItems(): <CircularProgress color=\"primary\" />}\r\n                        {products !== null ? convertProductToSelectItems() : <CircularProgress color=\"primary\" />}\r\n                        {productsAddedToOrder.length!==0? showProducts():<CircularProgress color=\"primary\" />}\r\n                        {order!==null? showOrderInfo(): <CircularProgress color=\"primary\" />}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light\" onClick={handleCancelUpdateOrder}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-light\" onClick={updateOrder}>\r\n                            Update\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            }\r\n            <Snackbar open={openSnackbar} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity={responseSuccess ? \"success\" : \"error\"}>\r\n                    {\r\n                        responseSuccess\r\n                            ?\r\n                            <span>Order has been updated to database.</span>\r\n                            :\r\n                            <span>Couldn't update the order.</span>\r\n                    }\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    )\r\n}\r\n","/app/src/components/dialogs/infoRowDialogs/OrderInfoDialog.js",["204"],"import axios from 'axios';\r\nimport {\r\n    CircularProgress,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    Paper,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React,  { useState, useEffect }  from \"react\";\r\nimport { url } from '../../../config/config';\r\nimport ProductOrderDetailsDialogDisabled from './ProductOrderDetailsDialogDisabled';\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    paper:{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        margin: 0,\r\n    },\r\n        chip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n}));\r\n\r\nexport default function ProductInfoDialog(props) {\r\n\r\n    const classes = useStyles();\r\n    const { row, onClose, open} = props;\r\n\r\n    const [customer,setCustomer]=useState(null);\r\n    const [products,setProducts]=useState(null);\r\n    const [productDetails,setProductDetails]=useState(null);\r\n    const [openChipDialog,setOpenChipDialog]=useState(false);\r\n\r\n    const orderID=row.cells.filter(cell=>cell.column.Header===\"Id\")[0].value;\r\n\r\n    const loadOrderByID=()=>{\r\n        console.log(`Entering...${orderID}`);\r\n        axios.get(`${url}/api/orders/${orderID}/customer/orderdetails`)\r\n            .then(response => {\r\n                console.log(\"Loading product details...\");\r\n                console.log(response);\r\n\r\n                setCustomer(response.data.customerId[0]);\r\n                console.log(response.data.customerId[0]);\r\n                setProducts(response.data.orderDetailsResult);\r\n                console.log(response.data.orderDetailsResult);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleCloseChipDialog=()=>{\r\n        setOpenChipDialog(false);\r\n        setProductDetails(null);\r\n    }\r\n\r\n    const openProductDetailsDialog=(product)=>{\r\n        setProductDetails(product);\r\n        setOpenChipDialog(true);\r\n        console.log(`Chiped cliked ${product.product.name}`);\r\n    }\r\n\r\n\r\n    const showProducts=()=>{\r\n        const temProducts=products.map(product =>\r\n            <li key={product.product.id}>\r\n                <Chip \r\n                    label={product.product.name} \r\n                    className={classes.chip}\r\n                    onClick={()=>openProductDetailsDialog(product)}\r\n                />\r\n            </li>\r\n        );\r\n        \r\n        return (\r\n            <Paper component=\"ul\" className={classes.paper}>\r\n                {temProducts}\r\n                {productDetails!==null?\r\n                    <ProductOrderDetailsDialogDisabled\r\n                        onClose={handleCloseChipDialog}\r\n                        open={openChipDialog}\r\n                        product={productDetails}\r\n                    />\r\n                    :null\r\n                }\r\n            </Paper>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={onClose}\r\n            open={open}\r\n            onEntered={loadOrderByID}\r\n        >\r\n            <DialogTitle>More info about Order</DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <form className={classes.root}>\r\n                    {\r\n                        customer==null\r\n                        ?<CircularProgress color=\"primary\" />\r\n                        :<TextField\r\n                            fullWidth\r\n                            label={\"Customer\"}\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            defaultValue={customer.name}\r\n                        />\r\n                    }\r\n                    {\r\n                        products==null\r\n                        ?<CircularProgress color=\"primary\" />\r\n                        :showProducts()\r\n                    }\r\n                    {row.cells.map(cell => {\r\n                        return (\r\n                            <TextField\r\n                                fullWidth\r\n                                label={cell.column.Header}\r\n                                InputProps={{\r\n                                    readOnly: true,\r\n                                }}\r\n                                disabled\r\n                                variant=\"outlined\"\r\n                                defaultValue={cell.value}\r\n                            />\r\n                        );\r\n                    })}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <button className=\"btn btn-light\" onClick={onClose}>\r\n                    Ok\r\n                </button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n","/app/src/components/dialogs/infoRowDialogs/ProductInfoDialog.js",["205","206","207"],"import axios from 'axios';\r\nimport {\r\n    CircularProgress,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    FormControl,\r\n    Input,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React,  { useState, useEffect }  from \"react\";\r\nimport { url } from '../../../config/config';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    container : {\r\n        flexGrow: 1,\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nexport default function ProductInfoDialog(props) {\r\n\r\n    const classes = useStyles();\r\n    const { row, onClose, open} = props;\r\n\r\n    const productID=row.cells.filter(cell=>cell.column.Header===\"Id\")[0].value;\r\n\r\n    const [product,setProduct]=useState(null);\r\n    const [supplier,setSupplier]=useState(null);\r\n    const [categories, setCategories]=useState([]);\r\n\r\n    const loadProductByID=()=>{\r\n        console.log(`Entering...${productID}`);\r\n        axios.get(`${url}/api/products/${productID}`)\r\n            .then(response => {\r\n                console.log(\"Loading product details...\");\r\n                console.log(response);\r\n\r\n                setSupplier(response.data.supplier);\r\n                setCategories(response.data.categories);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const mountSupplier=()=>{\r\n        return(\r\n            <TextField\r\n                    fullWidth\r\n                    label=\"Supplier company name\"\r\n                    InputProps={{\r\n                        readOnly: true,\r\n                    }}\r\n                    disabled\r\n                    variant=\"outlined\"\r\n                    defaultValue={supplier.companyName}\r\n                />\r\n        )\r\n    }\r\n\r\n    const mountCategories=()=>{\r\n\r\n        const selectedCategories=categories.map(category=>(\r\n            <MenuItem\r\n                key={category.id}\r\n                value={category}\r\n            >\r\n                {category.name}\r\n            </MenuItem>\r\n        ));\r\n\r\n        return(\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"multiple-category-label\">Category</InputLabel>\r\n                <Select\r\n                    labelId=\"multiple-category-label\"\r\n                    id=\"category-label\"\r\n                    value={categories}\r\n                    // onChange={handleSelectedCategoriesChange}\r\n                    multiple\r\n                    disabled\r\n                    input={<Input id=\"select-multiple-chip\" />}\r\n                    renderValue={selected => (\r\n                        <div className={classes.chips}>\r\n                            {selected.map(value => (\r\n                                <Chip key={value.id} label={value.name} className={classes.chip} />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    {selectedCategories}\r\n                </Select>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                onClose={onClose}\r\n                open={open}\r\n                onEntered={loadProductByID}\r\n            >\r\n                <DialogTitle>More info about Product</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form className={classes.root}>\r\n                        {row.cells.map(cell => {\r\n                            return (\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label={cell.column.Header}\r\n                                    InputProps={{\r\n                                        readOnly: true,\r\n                                    }}\r\n                                    disabled\r\n                                    variant=\"outlined\"\r\n                                    defaultValue={cell.value}\r\n                                />\r\n                            );\r\n                        })}\r\n                        {supplier?mountSupplier():<CircularProgress color=\"primary\" />}\r\n                        {categories?mountCategories():<CircularProgress color=\"primary\" />}\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button className=\"btn btn-light\" onClick={onClose}>\r\n                        Ok\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n","/app/src/components/dialogs/addRowDialogs/AddProductDialog.js",["208","209","210"],"import axios from 'axios';\r\nimport {\r\n    Backdrop,\r\n    CircularProgress,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    FormControl,\r\n    Input,\r\n    InputLabel,\r\n    MenuItem,\r\n    Snackbar,\r\n    Select,\r\n    TextField,\r\n    Slide,\r\n    Tooltip\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { url } from '../../../config/config';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nconst initProduct = {\r\n    name: '',\r\n    quantityPerUnit: 0,\r\n    unitPrice: 0,\r\n    unitsInStock: 0,\r\n    reorderLevel: 0,\r\n    unitsOnOrder: 0,\r\n    discontinued: 0\r\n}\r\n\r\nexport default function AddProductDialog(props) {\r\n\r\n    const classes = useStyles();\r\n    const { onClose, open, create } = props;\r\n\r\n    const [product, setProduct] = useState(initProduct);\r\n    const [supplier, setSupplier] = useState('');\r\n    const [suppliers, setSuppliers] = useState(null);\r\n    const [categories, setCategories] = useState(null);\r\n    const [selectedCategories, setSelectedCategories] = useState([]);\r\n    const [openBackdrop, setOpenBackdrop] = useState(false);\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [responseSuccess, setResponseSuccess] = useState(false);\r\n\r\n    useEffect(loadSuppliers, []);\r\n\r\n    function loadSuppliers() {\r\n        axios.get(`${url}/api/suppliers`)\r\n            .then(response => {\r\n                console.log(\"Loading suplliers...\");\r\n                console.log(response);\r\n                setSuppliers(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    useEffect(loadCategories, []);\r\n\r\n    function loadCategories() {\r\n        axios.get(`${url}/api/categories`)\r\n            .then(response => {\r\n                console.log(\"Loading categories...\");\r\n                console.log(response);\r\n                setCategories(response.data.nodes);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleCloseBackdrop = () => {\r\n        setOpenBackdrop(false);\r\n    };\r\n    const handleToggleBackdrop = () => {\r\n        setOpenBackdrop(!openBackdrop);\r\n    };\r\n\r\n    const handleChange = property => ({ target: { value } }) => {\r\n        setProduct({ ...product, [property]: value })\r\n    }\r\n\r\n    const handleClickSnackbar = () => {\r\n        setOpenSnackbar(true);\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    const handleSupplierChange = (event) => {\r\n        setSupplier(event.target.value);\r\n    };\r\n\r\n    const addProduct = () => {\r\n        console.log(\"Adding product...\");\r\n        console.log({\r\n            product,\r\n            supplier,\r\n            categories: selectedCategories\r\n        });\r\n\r\n        setResponseSuccess(false);\r\n        handleToggleBackdrop();\r\n        onClose();\r\n        axios\r\n            .post(`${url}/api/products`, {\r\n                product,\r\n                supplier,\r\n                categories: selectedCategories\r\n            })\r\n            .then(response => {\r\n                console.log(response);\r\n\r\n                setProduct(initProduct);\r\n                setSupplier(null);\r\n                setSelectedCategories([]);\r\n\r\n                if (response.status == 201) {\r\n                    setResponseSuccess(true);\r\n                    handleCloseBackdrop();\r\n                    handleClickSnackbar();\r\n                    create(response.data.product);\r\n                } else {\r\n                    setResponseSuccess(false);\r\n                    handleCloseBackdrop();\r\n                    handleClickSnackbar();\r\n                }\r\n            })\r\n            .catch(error => {\r\n\r\n                setResponseSuccess(false);\r\n                setProduct(initProduct);\r\n                setSupplier(null);\r\n                setSelectedCategories([]);\r\n\r\n                handleCloseBackdrop();\r\n                handleClickSnackbar();\r\n\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        onClose();\r\n        setProduct(initProduct);\r\n        setSupplier(null);\r\n        setSelectedCategories([]);\r\n    }\r\n\r\n    const convertSuppliersToSelectItems = () => {\r\n\r\n        const supplierSelectItems = suppliers.map(supplier => (\r\n            <MenuItem key={supplier.id} value={supplier}>\r\n                {supplier.companyName}\r\n            </MenuItem>\r\n        ));\r\n\r\n        return (\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"supplier-select-label\">Supplier</InputLabel>\r\n                <Select\r\n                    labelId=\"supplier-select-label\"\r\n                    id=\"supplier-select\"\r\n                    value={supplier}\r\n                    onChange={handleSupplierChange}\r\n                >\r\n                    {supplierSelectItems}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n    const handleSelectedCategoriesChange = (event) => {\r\n        console.log(event.target.value);\r\n        setSelectedCategories(event.target.value);\r\n    }\r\n\r\n    const convertCategoriesToMultipleSelect = () => {\r\n\r\n        const categoriesToShow = categories.map(category => (\r\n            <MenuItem\r\n                key={category.id}\r\n                value={category}\r\n            >\r\n                {category.name}\r\n            </MenuItem>\r\n        ));\r\n\r\n        return (\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"multiple-category-label\">Category</InputLabel>\r\n                <Select\r\n                    labelId=\"multiple-category-label\"\r\n                    id=\"category-label\"\r\n                    value={selectedCategories}\r\n                    onChange={handleSelectedCategoriesChange}\r\n                    multiple\r\n                    input={<Input id=\"select-multiple-chip\" />}\r\n                    renderValue={selected => (\r\n                        <div className={classes.chips}>\r\n                            {selected.map(value => (\r\n                                <Chip key={value.id} label={value.name} className={classes.chip} />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    {categoriesToShow}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {openBackdrop\r\n                ?\r\n                <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                    <CircularProgress color=\"primary\" />\r\n                </Backdrop>\r\n                :\r\n                <Dialog\r\n                    aria-labelledby=\"dialog-add-entity\"\r\n                    onClose={onClose}\r\n                    open={open}\r\n                >\r\n                    <DialogTitle>Add new product</DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            fullWidth\r\n                            id=\"product-name\"\r\n                            label=\"Name\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"text\"\r\n                            value={product.name}\r\n                            onChange={handleChange('name')}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"product-quantity-per-unit\"\r\n                            label=\"Quantity per unit\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"text\"\r\n                            defaultValue={product.quantityPerUnit}\r\n                            onChange={handleChange('quantityPerUnit')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"product-unit-price\"\r\n                            label=\"Unit price\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"number\"\r\n                            defaultValue={product.unitPrice}\r\n                            onChange={handleChange('unitPrice')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"product-units-in-stock\"\r\n                            label=\"Units in stock\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"number\"\r\n                            defaultValue={product.unitsInStock}\r\n                            onChange={handleChange('unitsInStock')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"product-reorder-level\"\r\n                            label=\"Reorder level\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"number\"\r\n                            defaultValue={product.reorderLevel}\r\n                            onChange={handleChange('reorderLevel')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"product-units-on-order\"\r\n                            label=\"Units on order\"\r\n                            margin=\"dense\"\r\n                            required\r\n                            type=\"number\"\r\n                            defaultValue={product.unitsOnOrder}\r\n                            onChange={handleChange('unitsOnOrder')}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        {suppliers !== null ? convertSuppliersToSelectItems() : null}\r\n                        {categories !== null ? convertCategoriesToMultipleSelect() : null}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light\" onClick={handleCancel}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-light\" onClick={addProduct}>\r\n                            Add\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            }\r\n            <Snackbar open={openSnackbar} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity={responseSuccess ? \"success\" : \"error\"}>\r\n                    {\r\n                        responseSuccess\r\n                            ?\r\n                            <span>New product has been added to database.</span>\r\n                            :\r\n                            <span>Couldn't add the product to database.</span>\r\n                    }\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    )\r\n}\r\n","/app/src/components/dialogs/addRowDialogs/AddCustomerDialog.js",[],"/app/src/components/dialogs/addRowDialogs/AddSupplierDialog.js",[],"/app/src/components/dialogs/addRowDialogs/AddOrderDialog.js",[],"/app/src/components/dialogs/addRowDialogs/AddCategoryDialog.js",[],"/app/src/components/dialogs/RemoveRowDialog.js",[],"/app/src/components/buttons/RemoveButton.js",[],"/app/src/components/buttons/InfoButton.js",[],"/app/src/components/dialogs/editRowDialogs/EditRowDialog.js",[],["211","212"],"/app/src/components/dialogs/infoRowDialogs/MoreRowInfoDialog.js",[],"/app/src/components/dialogs/infoRowDialogs/ProductOrderDetailsDialogDisabled.js",["213","214","215","216"],"import {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    TextField \r\n} from \"@material-ui/core\";\r\nimport React, {useState} from 'react'\r\n\r\nexport default function ProductOrderDetailsDialogDisabled(props) {\r\n\r\n    const {open,onClose}=props;\r\n    const [product,setProduct]=useState(props.product.product);\r\n    const [unitPrice,setUnitPrice]=useState(props.product.unitPrice);\r\n    const [quantity,setQuantity]=useState(props.product.quantity);\r\n    const [discount,setDiscount]=useState(props.product.discount);\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={onClose}\r\n            open={open}\r\n        >  \r\n            <DialogTitle>Product details for: <br/> {product.name}</DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"unitPrice\"\r\n                    label=\"Unit Price\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={unitPrice}\r\n                    disabled\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"quantity\"\r\n                    label=\"Quantity\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={quantity}\r\n                    disabled\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"discount\"\r\n                    label=\"Discount\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={discount}\r\n                    disabled\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <button className=\"btn btn-light\" onClick={onClose}>\r\n                    ok\r\n                </button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n","/app/src/components/dialogs/editRowDialogs/ProductOrderDetailsDialog.js",["217"],"import {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    TextField \r\n} from \"@material-ui/core\";\r\nimport React, {useState} from 'react'\r\n\r\nexport default function ProductOrderDetailsDialog(props) {\r\n\r\n    const {open,onClose,add}=props;\r\n    const [product,setProduct]=useState(props.product.product);\r\n    const [unitPrice,setUnitPrice]=useState(props.product.unitPrice);\r\n    const [quantity,setQuantity]=useState(props.product.quantity);\r\n    const [discount,setDiscount]=useState(props.product.discount);\r\n\r\n    const handleAddProductDetails=()=>{\r\n        const tempProduct={product,unitPrice,quantity,discount};\r\n        add(tempProduct);\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={onClose}\r\n            open={open}\r\n        >  \r\n            <DialogTitle>Set product details for: <br/> {product.name}</DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"unitPrice\"\r\n                    label=\"Unit Price\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={unitPrice}\r\n                    onChange={(event)=>setUnitPrice(event.target.value)}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"quantity\"\r\n                    label=\"Quantity\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={quantity}\r\n                    onChange={(event)=>setQuantity(event.target.value)}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"discount\"\r\n                    label=\"Discount\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={discount}\r\n                    onChange={(event)=>setDiscount(event.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <button className=\"btn btn-light\" onClick={onClose}>\r\n                    Cancel\r\n                </button>\r\n                <button className=\"btn btn-light\" onClick={handleAddProductDetails}>\r\n                    Add\r\n                </button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n","/app/src/components/dialogs/addRowDialogs/ProductOrderDetailsDialog.js",["218"],"import {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    TextField \r\n} from \"@material-ui/core\";\r\nimport React, {useState} from 'react'\r\n\r\nexport default function ProductOrderDetailsDialog(props) {\r\n\r\n    const {open,onClose,add}=props;\r\n    const [product,setProduct]=useState(props.product);\r\n    const [unitPrice,setUnitPrice]=useState(props.product.details.unitPrice);\r\n    const [quantity,setQuantity]=useState(props.product.details.quantity);\r\n    const [discount,setDiscount]=useState(props.product.details.discount);\r\n\r\n    const handleAddProductDetails=()=>{\r\n        let tempProduct=product;\r\n        tempProduct.details={unitPrice,quantity,discount}\r\n        add(tempProduct);\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={onClose}\r\n            open={open}\r\n        >  \r\n            <DialogTitle>Set product details for: <br/> {product.data.name}</DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"unitPrice\"\r\n                    label=\"Unit Price\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={unitPrice}\r\n                    onChange={(event)=>setUnitPrice(event.target.value)}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"quantity\"\r\n                    label=\"Quantity\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={quantity}\r\n                    onChange={(event)=>setQuantity(event.target.value)}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"discount\"\r\n                    label=\"Discount\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    type=\"number\"\r\n                    value={discount}\r\n                    onChange={(event)=>setDiscount(event.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <button className=\"btn btn-light\" onClick={onClose}>\r\n                    Cancel\r\n                </button>\r\n                <button className=\"btn btn-light\" onClick={handleAddProductDetails}>\r\n                    Add\r\n                </button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n","/app/src/components/buttons/EditButton.js",[],{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":5,"column":9,"nodeType":"225","messageId":"226","endLine":5,"endColumn":17},{"ruleId":"223","severity":1,"message":"227","line":27,"column":22,"nodeType":"225","messageId":"226","endLine":27,"endColumn":33},{"ruleId":"223","severity":1,"message":"228","line":6,"column":5,"nodeType":"225","messageId":"226","endLine":6,"endColumn":9},{"ruleId":"223","severity":1,"message":"229","line":15,"column":5,"nodeType":"225","messageId":"226","endLine":15,"endColumn":10},{"ruleId":"223","severity":1,"message":"230","line":22,"column":26,"nodeType":"225","messageId":"226","endLine":22,"endColumn":35},{"ruleId":"223","severity":1,"message":"231","line":26,"column":10,"nodeType":"225","messageId":"226","endLine":26,"endColumn":15},{"ruleId":"223","severity":1,"message":"232","line":52,"column":7,"nodeType":"225","messageId":"226","endLine":52,"endColumn":16},{"ruleId":"223","severity":1,"message":"233","line":65,"column":16,"nodeType":"225","messageId":"226","endLine":65,"endColumn":22},{"ruleId":"223","severity":1,"message":"234","line":317,"column":15,"nodeType":"225","messageId":"226","endLine":317,"endColumn":31},{"ruleId":"223","severity":1,"message":"235","line":52,"column":7,"nodeType":"225","messageId":"226","endLine":52,"endColumn":16},{"ruleId":"223","severity":1,"message":"236","line":66,"column":26,"nodeType":"225","messageId":"226","endLine":66,"endColumn":35},{"ruleId":"223","severity":1,"message":"233","line":67,"column":16,"nodeType":"225","messageId":"226","endLine":67,"endColumn":22},{"ruleId":"223","severity":1,"message":"230","line":14,"column":28,"nodeType":"225","messageId":"226","endLine":14,"endColumn":37},{"ruleId":"223","severity":1,"message":"230","line":18,"column":28,"nodeType":"225","messageId":"226","endLine":18,"endColumn":37},{"ruleId":"223","severity":1,"message":"237","line":62,"column":12,"nodeType":"225","messageId":"226","endLine":62,"endColumn":19},{"ruleId":"223","severity":1,"message":"238","line":62,"column":20,"nodeType":"225","messageId":"226","endLine":62,"endColumn":30},{"ruleId":"223","severity":1,"message":"239","line":18,"column":5,"nodeType":"225","messageId":"226","endLine":18,"endColumn":10},{"ruleId":"223","severity":1,"message":"240","line":19,"column":5,"nodeType":"225","messageId":"226","endLine":19,"endColumn":12},{"ruleId":"241","severity":1,"message":"242","line":164,"column":37,"nodeType":"243","messageId":"244","endLine":164,"endColumn":39},{"ruleId":"219","replacedBy":"245"},{"ruleId":"221","replacedBy":"246"},{"ruleId":"223","severity":1,"message":"238","line":14,"column":20,"nodeType":"225","messageId":"226","endLine":14,"endColumn":30},{"ruleId":"223","severity":1,"message":"247","line":15,"column":22,"nodeType":"225","messageId":"226","endLine":15,"endColumn":34},{"ruleId":"223","severity":1,"message":"248","line":16,"column":21,"nodeType":"225","messageId":"226","endLine":16,"endColumn":32},{"ruleId":"223","severity":1,"message":"249","line":17,"column":21,"nodeType":"225","messageId":"226","endLine":17,"endColumn":32},{"ruleId":"223","severity":1,"message":"238","line":14,"column":20,"nodeType":"225","messageId":"226","endLine":14,"endColumn":30},{"ruleId":"223","severity":1,"message":"238","line":14,"column":20,"nodeType":"225","messageId":"226","endLine":14,"endColumn":30},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'BiSearch' is defined but never used.","Identifier","unusedVar","'setResponse' is assigned a value but never used.","'Chip' is defined but never used.","'Input' is defined but never used.","'useEffect' is defined but never used.","'Alert' is defined but never used.","'MenuProps' is assigned a value but never used.","'setRow' is assigned a value but never used.","'categoriesToShow' is assigned a value but never used.","'initOrder' is assigned a value but never used.","'updateRow' is assigned a value but never used.","'product' is assigned a value but never used.","'setProduct' is assigned a value but never used.","'Slide' is defined but never used.","'Tooltip' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["250"],["251"],"'setUnitPrice' is assigned a value but never used.","'setQuantity' is assigned a value but never used.","'setDiscount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]